//
// Created by mmars on 10/6/2024.
//

#pragma once
#include <Menu/MainMenuElements/Settings/MenuItem3DPlotColorSettings.h>
#include <Parsing/AST.h>
#include <Plot/Plot3D/Plot3D.h>
#include <Settings/SettingsManager.h>

#define LOADING_STRING "Loading vertices..."
#define RENDERING_STRING "Rendering surface..."

namespace bp {

// TODO: Resolve issue with random lines

/**
 * Class that is responsible for taking a function and plotting it in 3 dimensional space.
 */
class Plotter3D {
    protected:
    const SettingsManager& sm;
    /**
     * Represents a "rectangular" mesh of points in 3D space where each point should be "connected" to the adjacent points
     */
    struct PointMesh {
        List<Point3D>& points;
        int width;
        int height;
        PointMesh(List<Point3D>& points, int width, int height) : points{points}, width{width}, height{height} {}
        void ClearMesh();
    };
    /**
     * Represents a variable and the range that it can take when being plotted
     */
    struct VariableRange {
        uint8_t var;
        double min;
        double max;
        double step;
        VariableRange(uint8_t var, double min, double max, double step) : var{var}, min{min}, max{max}, step{step} {}
    };

    /**
     * Draws "Loading vertices..." on the screen
     */
    void DrawLoadingString() const;
    /**
     * Draws "Rendering vertices..." on the screen and sets the correct drawing mode for plotting
     */
    void DrawRenderingString() const;
    /**
     * Clears "Rendering vertices..." from the screen
     */
    void ClearRenderingString() const;
    /**
     * Defines the conversion from the input space to the output space
     *
     * @param func Function used by the plotter
     * @param var1 Value of the first independent variable
     * @param var2 Value of the second independent variable
     *
     * @return `Point3D` in the output space that corresponds to the input
     */
    virtual Point3D* CreatePoint(const tiparser::AST* func, double var1, double var2) const = 0;
    /**
     * Uses the settings of the plot to find and output the ranges for each of the independent variables
     *
     * @param output1 `VariableRange` to output the first independent variable's data to
     * @param output2 `VariableRange` to output the second independent variable's data to
     */
    virtual void ExtractVariableSettings(VariableRange& output1, VariableRange& output2) const = 0;
    /**
     * Populates a given `PointMesh` with points generated by the function
     *
     * @param output `PointMesh` to output the result to
     * @param var1 Name and range of the first independent variable
     * @param var2 Name and range of the second independent variable
     * @param func Function to populate the `PointMesh` with
     *
     * @return `false` if the process completed without interruption or `true` if it was interrupted
     */
    bool GeneratePointMesh(PointMesh& output, VariableRange var1, VariableRange var2, const tiparser::AST* func) const;
    /**
     * Plots the provided point mesh by (optionally) drawing lines between them and (optionally) shading the regions between the points
     *
     * @param mesh `PointMesh` to plot
     * @param plot `Plot3D` that the mesh should be plotted on
     * @param color `BaseColor` to shade the regions between the points; ignored if this option is disabled in settings
     *
     * @return `false` if the plotting process completed without interruption or `true` otherwise
     */
    bool PlotPoints(PointMesh mesh, Plot3D& plot, BaseColor color) const;

    public:
    explicit Plotter3D(const SettingsManager& sm) : sm{sm} {}
    virtual ~Plotter3D() = default;

    /**
     * Plots the provided function on the provided plot in the provided color
     *
     * @param func Function to plot
     * @param plot `Plot3D` to plot the function on
     * @param color `BaseColor` to shade the plot if that setting is enabled
     *
     * @return `true` if the process was interrupted by the user or `false` otherwise
     */
    virtual bool Plot(const tiparser::AST* func, Plot3D& plot, BaseColor color) const;
};

}  // namespace bp
